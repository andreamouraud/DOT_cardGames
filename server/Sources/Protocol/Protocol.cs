// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Protocol.proto</summary>
public static partial class ProtocolReflection {

  #region Descriptor
  /// <summary>File descriptor for Protocol.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProtocolReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5Qcm90b2NvbC5wcm90byJsCgZBY3Rpb24SDAoEc3VpdBgDIAEoCRIaCgR0",
          "eXBlGAEgASgOMgwuQWN0aW9uLlR5cGUSDAoEcmFuaxgCIAEoCSIqCgRUeXBl",
          "EgsKB1VOS05PV04QABIICgRDQUxMEAESCwoHUFVUQ0FSRBACIoQCCgNCaWQS",
          "GwoGYWN0aW9uGAEgASgOMgsuQmlkLkFjdGlvbhIZCgVhdG91dBgCIAEoDjIK",
          "LkJpZC5BdG91dBINCgV2YWx1ZRgDIAEoBSJlCgVBdG91dBILCgdVTktOT1dO",
          "EAASCgoGU1BBREVTEAESDAoIRElBTU9ORFMQAhIJCgVDTFVCUxADEg4KClNB",
          "TlNfQVRPVVQQBBIOCgpUT1VUX0FUT1VUEAUSCgoGSEVBUlRTEAYiTwoGQWN0",
          "aW9uEgsKB05PVEhJTkcQABIHCgNCSUQQARILCgdDT0lOQ0hFEAISDgoKU1VS",
          "Q09JTkNIRRADEggKBFBBU1MQBBIICgROQU1FEAUidQoHQ29tbWFuZBIQCghh",
          "cmd1bWVudBgBIAEoCRIbCgR0eXBlGAIgASgOMg0uQ29tbWFuZC5UeXBlIjsK",
          "BFR5cGUSCwoHVU5LTk9XThAAEggKBEhFTFAQARIICgRRVUlUEAISCAoETElT",
          "VBADEggKBE5BTUUQBCJ7CgVTdGFnZRIZCgR0eXBlGAEgASgOMgsuU3RhZ2Uu",
          "VHlwZSJXCgRUeXBlEgsKB1VOS05PV04QABIQCgxCSURfWU9VUlRVUk4QARIO",
          "CgpHQU1FX1NUQVJUEAISEQoNR0FNRV9ZT1VSVFVSThADEg0KCUJJRF9TVEFS",
          "VBAEIuUBCgZQYWNrZXQSGgoEdHlwZRgBIAEoDjIMLlBhY2tldC5UeXBlEhkK",
          "B2NvbW1hbmQYAiABKAsyCC5Db21tYW5kEhEKA2JpZBgDIAEoCzIELkJpZBIX",
          "CgZhY3Rpb24YBCABKAsyBy5BY3Rpb24SFQoFc3RhZ2UYBSABKAsyBi5TdGFn",
          "ZRIPCgdtZXNzYWdlGAYgASgJEg4KBnN0YXR1cxgHIAEoCCJACgRUeXBlEgsK",
          "B1VOS05PV04QABIHCgNCSUQQARIKCgZBQ1RJT04QAhIJCgVTVEFHRRADEgsK",
          "B0NPTU1BTkQQBEIWCgpldS5lcGl0ZWNoQghQcm90b2NvbGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Action), global::Action.Parser, new[]{ "Suit", "Type", "Rank" }, null, new[]{ typeof(global::Action.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Bid), global::Bid.Parser, new[]{ "Action", "Atout", "Value" }, null, new[]{ typeof(global::Bid.Types.Atout), typeof(global::Bid.Types.Action) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Command), global::Command.Parser, new[]{ "Argument", "Type" }, null, new[]{ typeof(global::Command.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Stage), global::Stage.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Stage.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Packet), global::Packet.Parser, new[]{ "Type", "Command", "Bid", "Action", "Stage", "Message", "Status" }, null, new[]{ typeof(global::Packet.Types.Type) }, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Action : pb::IMessage<Action> {
  private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Action> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Action() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Action(Action other) : this() {
    suit_ = other.suit_;
    type_ = other.type_;
    rank_ = other.rank_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Action Clone() {
    return new Action(this);
  }

  /// <summary>Field number for the "suit" field.</summary>
  public const int SuitFieldNumber = 3;
  private string suit_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Suit {
    get { return suit_; }
    set {
      suit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Action.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Action.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 2;
  private string rank_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Rank {
    get { return rank_; }
    set {
      rank_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Action);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Action other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Suit != other.Suit) return false;
    if (Type != other.Type) return false;
    if (Rank != other.Rank) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Suit.Length != 0) hash ^= Suit.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Rank.Length != 0) hash ^= Rank.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Rank.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Rank);
    }
    if (Suit.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Suit);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Suit.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Suit);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Rank.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Rank);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Action other) {
    if (other == null) {
      return;
    }
    if (other.Suit.Length != 0) {
      Suit = other.Suit;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Rank.Length != 0) {
      Rank = other.Rank;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::Action.Types.Type) input.ReadEnum();
          break;
        }
        case 18: {
          Rank = input.ReadString();
          break;
        }
        case 26: {
          Suit = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Action message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("UNKNOWN")] Unknown = 0,
      [pbr::OriginalName("CALL")] Call = 1,
      [pbr::OriginalName("PUTCARD")] Putcard = 2,
    }

  }
  #endregion

}

public sealed partial class Bid : pb::IMessage<Bid> {
  private static readonly pb::MessageParser<Bid> _parser = new pb::MessageParser<Bid>(() => new Bid());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Bid> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Bid() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Bid(Bid other) : this() {
    action_ = other.action_;
    atout_ = other.atout_;
    value_ = other.value_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Bid Clone() {
    return new Bid(this);
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 1;
  private global::Bid.Types.Action action_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Bid.Types.Action Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  /// <summary>Field number for the "atout" field.</summary>
  public const int AtoutFieldNumber = 2;
  private global::Bid.Types.Atout atout_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Bid.Types.Atout Atout {
    get { return atout_; }
    set {
      atout_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 3;
  private int value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Bid);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Bid other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Action != other.Action) return false;
    if (Atout != other.Atout) return false;
    if (Value != other.Value) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Action != 0) hash ^= Action.GetHashCode();
    if (Atout != 0) hash ^= Atout.GetHashCode();
    if (Value != 0) hash ^= Value.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Action != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Action);
    }
    if (Atout != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Atout);
    }
    if (Value != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Value);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Action != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
    }
    if (Atout != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Atout);
    }
    if (Value != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Bid other) {
    if (other == null) {
      return;
    }
    if (other.Action != 0) {
      Action = other.Action;
    }
    if (other.Atout != 0) {
      Atout = other.Atout;
    }
    if (other.Value != 0) {
      Value = other.Value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          action_ = (global::Bid.Types.Action) input.ReadEnum();
          break;
        }
        case 16: {
          atout_ = (global::Bid.Types.Atout) input.ReadEnum();
          break;
        }
        case 24: {
          Value = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Bid message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Atout {
      [pbr::OriginalName("UNKNOWN")] Unknown = 0,
      [pbr::OriginalName("SPADES")] Spades = 1,
      [pbr::OriginalName("DIAMONDS")] Diamonds = 2,
      [pbr::OriginalName("CLUBS")] Clubs = 3,
      [pbr::OriginalName("SANS_ATOUT")] SansAtout = 4,
      [pbr::OriginalName("TOUT_ATOUT")] ToutAtout = 5,
      [pbr::OriginalName("HEARTS")] Hearts = 6,
    }

    public enum Action {
      [pbr::OriginalName("NOTHING")] Nothing = 0,
      [pbr::OriginalName("BID")] Bid = 1,
      [pbr::OriginalName("COINCHE")] Coinche = 2,
      [pbr::OriginalName("SURCOINCHE")] Surcoinche = 3,
      [pbr::OriginalName("PASS")] Pass = 4,
      [pbr::OriginalName("NAME")] Name = 5,
    }

  }
  #endregion

}

public sealed partial class Command : pb::IMessage<Command> {
  private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Command> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Command() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Command(Command other) : this() {
    argument_ = other.argument_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Command Clone() {
    return new Command(this);
  }

  /// <summary>Field number for the "argument" field.</summary>
  public const int ArgumentFieldNumber = 1;
  private string argument_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Argument {
    get { return argument_; }
    set {
      argument_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::Command.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Command.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Command);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Command other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Argument != other.Argument) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Argument.Length != 0) hash ^= Argument.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Argument.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Argument);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Argument.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Argument);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Command other) {
    if (other == null) {
      return;
    }
    if (other.Argument.Length != 0) {
      Argument = other.Argument;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Argument = input.ReadString();
          break;
        }
        case 16: {
          type_ = (global::Command.Types.Type) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Command message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("UNKNOWN")] Unknown = 0,
      [pbr::OriginalName("HELP")] Help = 1,
      [pbr::OriginalName("QUIT")] Quit = 2,
      [pbr::OriginalName("LIST")] List = 3,
      [pbr::OriginalName("NAME")] Name = 4,
    }

  }
  #endregion

}

public sealed partial class Stage : pb::IMessage<Stage> {
  private static readonly pb::MessageParser<Stage> _parser = new pb::MessageParser<Stage>(() => new Stage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Stage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Stage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Stage(Stage other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Stage Clone() {
    return new Stage(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Stage.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Stage.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Stage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Stage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Stage other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::Stage.Types.Type) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Stage message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("UNKNOWN")] Unknown = 0,
      [pbr::OriginalName("BID_YOURTURN")] BidYourturn = 1,
      [pbr::OriginalName("GAME_START")] GameStart = 2,
      [pbr::OriginalName("GAME_YOURTURN")] GameYourturn = 3,
      [pbr::OriginalName("BID_START")] BidStart = 4,
    }

  }
  #endregion

}

public sealed partial class Packet : pb::IMessage<Packet> {
  private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Packet> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Packet() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Packet(Packet other) : this() {
    type_ = other.type_;
    Command = other.command_ != null ? other.Command.Clone() : null;
    Bid = other.bid_ != null ? other.Bid.Clone() : null;
    Action = other.action_ != null ? other.Action.Clone() : null;
    Stage = other.stage_ != null ? other.Stage.Clone() : null;
    message_ = other.message_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Packet Clone() {
    return new Packet(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Packet.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Packet.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "command" field.</summary>
  public const int CommandFieldNumber = 2;
  private global::Command command_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Command Command {
    get { return command_; }
    set {
      command_ = value;
    }
  }

  /// <summary>Field number for the "bid" field.</summary>
  public const int BidFieldNumber = 3;
  private global::Bid bid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Bid Bid {
    get { return bid_; }
    set {
      bid_ = value;
    }
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 4;
  private global::Action action_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Action Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 5;
  private global::Stage stage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Stage Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 6;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 7;
  private bool status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Packet);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Packet other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!object.Equals(Command, other.Command)) return false;
    if (!object.Equals(Bid, other.Bid)) return false;
    if (!object.Equals(Action, other.Action)) return false;
    if (!object.Equals(Stage, other.Stage)) return false;
    if (Message != other.Message) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (command_ != null) hash ^= Command.GetHashCode();
    if (bid_ != null) hash ^= Bid.GetHashCode();
    if (action_ != null) hash ^= Action.GetHashCode();
    if (stage_ != null) hash ^= Stage.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (Status != false) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (command_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Command);
    }
    if (bid_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Bid);
    }
    if (action_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Action);
    }
    if (stage_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Stage);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Message);
    }
    if (Status != false) {
      output.WriteRawTag(56);
      output.WriteBool(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (command_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Command);
    }
    if (bid_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bid);
    }
    if (action_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
    }
    if (stage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stage);
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (Status != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Packet other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.command_ != null) {
      if (command_ == null) {
        command_ = new global::Command();
      }
      Command.MergeFrom(other.Command);
    }
    if (other.bid_ != null) {
      if (bid_ == null) {
        bid_ = new global::Bid();
      }
      Bid.MergeFrom(other.Bid);
    }
    if (other.action_ != null) {
      if (action_ == null) {
        action_ = new global::Action();
      }
      Action.MergeFrom(other.Action);
    }
    if (other.stage_ != null) {
      if (stage_ == null) {
        stage_ = new global::Stage();
      }
      Stage.MergeFrom(other.Stage);
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    if (other.Status != false) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::Packet.Types.Type) input.ReadEnum();
          break;
        }
        case 18: {
          if (command_ == null) {
            command_ = new global::Command();
          }
          input.ReadMessage(command_);
          break;
        }
        case 26: {
          if (bid_ == null) {
            bid_ = new global::Bid();
          }
          input.ReadMessage(bid_);
          break;
        }
        case 34: {
          if (action_ == null) {
            action_ = new global::Action();
          }
          input.ReadMessage(action_);
          break;
        }
        case 42: {
          if (stage_ == null) {
            stage_ = new global::Stage();
          }
          input.ReadMessage(stage_);
          break;
        }
        case 50: {
          Message = input.ReadString();
          break;
        }
        case 56: {
          Status = input.ReadBool();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Packet message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("UNKNOWN")] Unknown = 0,
      [pbr::OriginalName("BID")] Bid = 1,
      [pbr::OriginalName("ACTION")] Action = 2,
      [pbr::OriginalName("STAGE")] Stage = 3,
      [pbr::OriginalName("COMMAND")] Command = 4,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
